[{"D:\\Users\\Leehyeokjae\\Workspace\\VSC_Workspace\\GitHub\\insider-trade-dashboard\\src\\reportWebVitals.ts":"1","D:\\Users\\Leehyeokjae\\Workspace\\VSC_Workspace\\GitHub\\insider-trade-dashboard\\src\\App.tsx":"2","D:\\Users\\Leehyeokjae\\Workspace\\VSC_Workspace\\GitHub\\insider-trade-dashboard\\src\\modules\\base_modules.ts":"3","D:\\Users\\Leehyeokjae\\Workspace\\VSC_Workspace\\GitHub\\insider-trade-dashboard\\src\\index.tsx":"4","D:\\Users\\Leehyeokjae\\Workspace\\VSC_Workspace\\GitHub\\insider-trade-dashboard\\src\\component\\stock_list_button.tsx":"5","D:\\Users\\Leehyeokjae\\Workspace\\VSC_Workspace\\GitHub\\insider-trade-dashboard\\src\\component\\chart.tsx":"6"},{"size":425,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":868,"mtime":1611790128373,"results":"9","hashOfConfig":"8"},{"size":1004,"mtime":1611748327779,"results":"10","hashOfConfig":"8"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"8"},{"size":905,"mtime":1611751445076,"results":"12","hashOfConfig":"8"},{"size":1659,"mtime":1611794538190,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"ayv2xt",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"D:\\Users\\Leehyeokjae\\Workspace\\VSC_Workspace\\GitHub\\insider-trade-dashboard\\src\\reportWebVitals.ts",[],["31","32"],"D:\\Users\\Leehyeokjae\\Workspace\\VSC_Workspace\\GitHub\\insider-trade-dashboard\\src\\App.tsx",["33","34"],"import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Stock_list_button from \"./component/stock_list_button\";\nimport Chart from \"./component/chart\";\nimport { get_json_data } from \"./modules/base_modules\";\nconst stock_list_data = get_json_data(\"https://toy-projects-api.herokuapp.com/insidertrade/list\");\nconst base_url = \"https://toy-projects-api.herokuapp.com/insidertrade/\";\nconst stock_data = get_json_data(base_url + stock_list_data[0].ticker);\nfunction App() {\n  return (\n    <div className=\"body_div\">\n      <div className=\"stock_list_container\">\n        <Stock_list_button list_data={stock_list_data} />\n      </div>\n      <div className=\"chart_container\">\n        <Chart stock_data={stock_data} trade_data={stock_list_data[0]} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\Users\\Leehyeokjae\\Workspace\\VSC_Workspace\\GitHub\\insider-trade-dashboard\\src\\modules\\base_modules.ts",["35","36"],"const get_json_data = (url: string) => {\r\n  let xmlhttp = new XMLHttpRequest();\r\n  let json_data: any;\r\n  xmlhttp.onreadystatechange = () => {\r\n    if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\r\n      try {\r\n        json_data = JSON.parse(xmlhttp.responseText);\r\n      } catch (err) {\r\n        console.log(err.message + \" in \" + xmlhttp.responseText);\r\n        return;\r\n      }\r\n    }\r\n  };\r\n  xmlhttp.open(\"GET\", url, false);\r\n  xmlhttp.send();\r\n  return json_data;\r\n};\r\n\r\nfunction getFormatDate(input_date: Date, form: string) {\r\n  const date = new Date(input_date);\r\n  const num2str = (num: number) => {\r\n    let result;\r\n    if (num < 10) {\r\n      result = \"0\" + num;\r\n    } else {\r\n      result = String(num);\r\n    }\r\n    return result;\r\n  };\r\n  let year: number = date.getFullYear(); //yyyy\r\n  let month: string = num2str(1 + date.getMonth()); //M\r\n  let day: string = num2str(date.getDate());\r\n\r\n  return year + form + month + form + day;\r\n}\r\n\r\nexport { get_json_data, getFormatDate };\r\n","D:\\Users\\Leehyeokjae\\Workspace\\VSC_Workspace\\GitHub\\insider-trade-dashboard\\src\\index.tsx",[],"D:\\Users\\Leehyeokjae\\Workspace\\VSC_Workspace\\GitHub\\insider-trade-dashboard\\src\\component\\stock_list_button.tsx",["37","38","39","40","41"],"import React from \"react\";\r\nimport { getFormatDate } from \"../modules/base_modules\";\r\nimport { Button, ButtonGroup, ButtonToolbar, DropdownToggle, ButtonDropdown, DropdownMenu, DropdownItem } from \"reactstrap\";\r\n\r\nconst Stock_list_button = (props: any) => {\r\n  const stock_list_data = props.list_data;\r\n  const stock_item = (list_data: any) => {\r\n    return (\r\n      <>\r\n        <Button>\r\n          <ul>\r\n            <li>\r\n              <h4>{list_data.ticker}</h4>\r\n            </li>\r\n            <li>{getFormatDate(list_data.trade_date, \"-\")}</li>\r\n            <li>{list_data.company_name}</li>\r\n          </ul>\r\n        </Button>\r\n      </>\r\n    );\r\n  };\r\n  const stock_list = stock_list_data.map((list_data: any) => stock_item(list_data));\r\n  return (\r\n    <div className=\"stock_list\">\r\n      <ButtonGroup vertical>{stock_list}</ButtonGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stock_list_button;\r\n","D:\\Users\\Leehyeokjae\\Workspace\\VSC_Workspace\\GitHub\\insider-trade-dashboard\\src\\component\\chart.tsx",["42","43","44"],"import React, { Component, Fragment, useState } from \"react\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { getFormatDate } from \"../modules/base_modules\";\r\n\r\nconst Chart = (props: any) => {\r\n  const stock_data = props.stock_data;\r\n  const price_data = stock_data.map((stock_data: any) => [new Date(stock_data.date).getTime(), stock_data.close]);\r\n  const trade_data = props.trade_data;\r\n  //price_data.push([new Date(trade_data.trade_date).getTime, trade_data.price]);\r\n  const [data, set_data] = useState<any>(price_data);\r\n  //price.push(trade_data.price);\r\n  //date.push(trade_date);\r\n  const options = {\r\n    chart: {\r\n      type: \"line\", // bar차트. 아무 설정이 없으면 line chart가 된다.\r\n      inverted: false,\r\n      scrollablePlotArea: {\r\n        minWidth: 4000,\r\n      },\r\n    },\r\n    title: {\r\n      text: \"Stock Chart\",\r\n    },\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n    xAxis: {\r\n      margin: 15,\r\n      type: \"datetime\",\r\n      labels: {\r\n        format: \"{value:%Y-%m-%d}\",\r\n      },\r\n      showFirstLabel: true,\r\n      showLastLabel: true,\r\n    },\r\n    yAxis: {},\r\n    legend: {\r\n      reversed: true,\r\n    },\r\n    plotOptions: {\r\n      series: {\r\n        stacking: \"normal\",\r\n        dataLabels: {\r\n          enabled: false,\r\n          format: \"<b>{point.y}</b>\",\r\n        },\r\n      },\r\n    },\r\n    series: [{ name: trade_data.company_name, data: data }],\r\n  };\r\n  return (\r\n    <div className=\"chart\">\r\n      <Fragment>\r\n        <HighchartsReact highcharts={Highcharts} options={options} />\r\n      </Fragment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":2,"column":8,"nodeType":"51","messageId":"52","endLine":2,"endColumn":12},{"ruleId":"53","severity":1,"message":"54","line":15,"column":9,"nodeType":"55","endLine":15,"endColumn":58},{"ruleId":"56","severity":1,"message":"57","line":5,"column":28,"nodeType":"58","messageId":"59","endLine":5,"endColumn":30},{"ruleId":"56","severity":1,"message":"57","line":5,"column":51,"nodeType":"58","messageId":"59","endLine":5,"endColumn":53},{"ruleId":"49","severity":1,"message":"60","line":3,"column":31,"nodeType":"51","messageId":"52","endLine":3,"endColumn":44},{"ruleId":"49","severity":1,"message":"61","line":3,"column":46,"nodeType":"51","messageId":"52","endLine":3,"endColumn":60},{"ruleId":"49","severity":1,"message":"62","line":3,"column":62,"nodeType":"51","messageId":"52","endLine":3,"endColumn":76},{"ruleId":"49","severity":1,"message":"63","line":3,"column":78,"nodeType":"51","messageId":"52","endLine":3,"endColumn":90},{"ruleId":"49","severity":1,"message":"64","line":3,"column":92,"nodeType":"51","messageId":"52","endLine":3,"endColumn":104},{"ruleId":"49","severity":1,"message":"65","line":1,"column":17,"nodeType":"51","messageId":"52","endLine":1,"endColumn":26},{"ruleId":"49","severity":1,"message":"66","line":4,"column":10,"nodeType":"51","messageId":"52","endLine":4,"endColumn":23},{"ruleId":"49","severity":1,"message":"67","line":11,"column":16,"nodeType":"51","messageId":"52","endLine":11,"endColumn":24},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react/jsx-pascal-case","Imported JSX component Stock_list_button must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ButtonToolbar' is defined but never used.","'DropdownToggle' is defined but never used.","'ButtonDropdown' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'Component' is defined but never used.","'getFormatDate' is defined but never used.","'set_data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]