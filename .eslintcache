[{"C:\\Users\\suyon\\Desktop\\Programing\\New_insider_trade\\insider-trade-dashboard\\src\\index.tsx":"1","C:\\Users\\suyon\\Desktop\\Programing\\New_insider_trade\\insider-trade-dashboard\\src\\reportWebVitals.ts":"2","C:\\Users\\suyon\\Desktop\\Programing\\New_insider_trade\\insider-trade-dashboard\\src\\App.tsx":"3","C:\\Users\\suyon\\Desktop\\Programing\\New_insider_trade\\insider-trade-dashboard\\src\\modules\\base_modules.ts":"4","C:\\Users\\suyon\\Desktop\\Programing\\New_insider_trade\\insider-trade-dashboard\\src\\component\\chart.tsx":"5","C:\\Users\\suyon\\Desktop\\Programing\\New_insider_trade\\insider-trade-dashboard\\src\\component\\stock_list_button.tsx":"6"},{"size":526,"mtime":1612799052286,"results":"7","hashOfConfig":"8"},{"size":440,"mtime":1611841835067,"results":"9","hashOfConfig":"8"},{"size":2113,"mtime":1612807286074,"results":"10","hashOfConfig":"8"},{"size":1070,"mtime":1612797940192,"results":"11","hashOfConfig":"8"},{"size":1928,"mtime":1612811887244,"results":"12","hashOfConfig":"8"},{"size":1041,"mtime":1612803238698,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"84sn52",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},"C:\\Users\\suyon\\Desktop\\Programing\\New_insider_trade\\insider-trade-dashboard\\src\\index.tsx",[],["32","33"],"C:\\Users\\suyon\\Desktop\\Programing\\New_insider_trade\\insider-trade-dashboard\\src\\reportWebVitals.ts",[],"C:\\Users\\suyon\\Desktop\\Programing\\New_insider_trade\\insider-trade-dashboard\\src\\App.tsx",["34","35","36","37"],"import React,{useState} from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Stock_list_button from \"./component/stock_list_button\";\r\nimport Chart from \"./component/chart\";\r\nimport { get_json_data } from \"./modules/base_modules\";\r\nimport { chart } from \"highcharts\";\r\nimport { ListGroupItemHeading } from \"reactstrap\";\r\n\r\nconst stock_list_data = get_json_data(\"https://toy-projects-api.herokuapp.com/insidertrade/list\");\r\nconst base_url = \"https://toy-projects-api.herokuapp.com/insidertrade/\";\r\n\r\n\r\nfunction App() {\r\n  const [chart_data, set_chart_data] = useState(stock_list_data[0]);\r\n  const [stock_data, set_stock_data] = useState(get_json_data(base_url + stock_list_data[0].ticker));//useState 로 변경 let,const사용\r\n  const [loading, set_loading] = useState(\"Loaded!\");\r\n  const [loading_txt,set_loading_txt] = useState(\"\");\r\n  var isloading = () => {\r\n    set_loading(\"spinner-border text-light\");\r\n    set_loading_txt(\"now Loading...\");\r\n  };\r\n  var isloaded = () => {\r\n    set_loading(\"now Loading...\");\r\n    set_loading_txt(\"\");\r\n  };\r\n  var test4 = (selected_stock_data: any) => {\r\n    isloading();\r\n    setTimeout(function(){\r\n    set_chart_data(selected_stock_data);\r\n    set_stock_data(get_json_data(base_url + selected_stock_data.ticker));\r\n    isloaded();  \r\n  },100)\r\n    \r\n    console.log(stock_data);\r\n    console.log(chart_data);\r\n    \r\n  };\r\n\r\n  return (\r\n    <div className=\"body_div\">\r\n      \r\n      <div className=\"stock_list_container\">\r\n        <Stock_list_button list_data={stock_list_data} onclick_fn={test4} onclick_fn2={isloading}/>\r\n      </div>\r\n      \r\n      <div className=\"chart_container\">\r\n        <Chart stock_data={stock_data} trade_data={chart_data} event_fn={isloading} event_fn2={isloaded} />\r\n        \r\n      \r\n      </div>\r\n      <div className=\"d-flex justify-content-center\">\r\n        <div className={loading} role=\"status\">\r\n          \r\n        </div>\r\n        <span className = \"load_text\">{loading_txt}</span>\r\n        </div>\r\n    </div>\r\n    \r\n    \r\n  );\r\n}\r\n\r\nexport default App; \r\n\r\n\r\n","C:\\Users\\suyon\\Desktop\\Programing\\New_insider_trade\\insider-trade-dashboard\\src\\modules\\base_modules.ts",["38","39","40"],"import { trackPromise } from 'react-promise-tracker';\r\n\r\nconst get_json_data = (url: string) => {\r\n  \r\n  let xmlhttp = new XMLHttpRequest();\r\n  let json_data: any;\r\n   \r\n  xmlhttp.onreadystatechange = () => {\r\n    if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\r\n      try {\r\n        json_data = JSON.parse(xmlhttp.responseText);\r\n      } catch (err) {\r\n        console.log(err.message + \" in \" + xmlhttp.responseText);\r\n        return;\r\n      }\r\n    }\r\n  };\r\n  xmlhttp.open(\"GET\", url, false);\r\n  xmlhttp.send();\r\n  return json_data;\r\n};\r\n\r\nfunction getFormatDate(input_date: Date, form: string) {\r\n  const date = new Date(input_date);\r\n  const num2str = (num: number) => {\r\n    let result;\r\n    if (num < 10) {\r\n      result = \"0\" + num;\r\n    } else {\r\n      result = String(num);\r\n    }\r\n    return result;\r\n  };\r\n  let year: number = date.getFullYear(); //yyyy\r\n  let month: string = num2str(1 + date.getMonth()); //M\r\n  let day: string = num2str(date.getDate());\r\n\r\n  return year + form + month + form + day;\r\n}\r\n\r\nexport { get_json_data, getFormatDate };\r\n","C:\\Users\\suyon\\Desktop\\Programing\\New_insider_trade\\insider-trade-dashboard\\src\\component\\chart.tsx",["41","42","43"],"import React, { Component, Fragment, useState } from \"react\";\r\nimport Highcharts from \"highcharts/highstock\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { getFormatDate } from \"../modules/base_modules\";\r\n     \r\nfunction Chart (props: any){\r\n  const stock_data = props.stock_data;\r\n  //const [stock_data,set_stock_data] = useState(props.stock_data);\r\n  const chart_data = stock_data.map((stock_data: any) => [new Date(stock_data.date).getTime(),stock_data.close]);\r\n  console.log(chart_data);\r\n  const trade_data = props.trade_data;\r\n  //price_data.push([new Date(trade_data.trade_date).getTime, trade_data.price]);\r\n  \r\n  //price.push(trade_data.price);\r\n  //date.push(trade_date);\r\n  \r\n  const options = {\r\n    chart: {\r\n      type: \"line\",\r\n      inverted: false,\r\n    },\r\n    title: {\r\n      text: trade_data.company_name,\r\n    },\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n    \r\n    xAxis: {\r\n      margin: 15,\r\n      type: \"datetime\",\r\n      labels: {\r\n        format: \"{value:%Y-%m-%d}\",\r\n      },\r\n      showFirstLabel: true,\r\n      showLastLabel: true,\r\n    },\r\n    yAxis: {},\r\n    legend: {\r\n      reversed: true,\r\n    },\r\n    navigator:{\r\n      height: 60,\r\n      minWidth:4000,\r\n      handles:{\r\n        backgroundColor: 'gray',\r\n        borderColor:'#02343f'\r\n      },\r\n      series: { data: chart_data },\r\n    },\r\n    \r\n    rangeSelector: {\r\n      selected: 5,\r\n      inputEnabled:false\r\n  },\r\n    plotOptions: {\r\n      series: {\r\n        stacking: \"normal\",\r\n        dataLabels: {\r\n          enabled: false,\r\n          format: \"<b>{point.y}</b>\",\r\n        },\r\n      },\r\n    },\r\n    series: [{ name: trade_data.company_name, data: chart_data }],\r\n  };\r\n  \r\n  return (\r\n    <div className=\"chart\">\r\n      <Fragment>\r\n        <HighchartsReact highcharts={Highcharts}  constructorType={'stockChart'} options={options} />\r\n      </Fragment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n\r\n","C:\\Users\\suyon\\Desktop\\Programing\\New_insider_trade\\insider-trade-dashboard\\src\\component\\stock_list_button.tsx",["44","45","46","47","48","49","50"],"import React from \"react\";\r\nimport { getFormatDate } from \"../modules/base_modules\";\r\nimport { Button, ButtonGroup, ButtonToolbar, DropdownToggle, ButtonDropdown, DropdownMenu, DropdownItem } from \"reactstrap\";\r\n\r\nconst Stock_list_button = (props: any) => {\r\n  const stock_list_data = props.list_data;\r\n  const stock_item = (list_data: any) => {\r\n    return (\r\n      <>\r\n        <Button><a onClick = {() => props.onclick_fn2()}><a onClick={() => props.onclick_fn(list_data)}>\r\n          <ul>  \r\n            <li><h4>{list_data.ticker}</h4></li>\r\n            <li>{list_data.company_name}</li>\r\n            <li><h6>{list_data.insider_name}</h6></li>\r\n            <li>{getFormatDate(list_data.trade_date, \"-\")}</li>\r\n          </ul>\r\n          </a></a>\r\n        </Button>\r\n      </>\r\n    );\r\n  };\r\n  const stock_list = stock_list_data.map((list_data: any) => stock_item(list_data));\r\n  return (\r\n    <div className=\"stock_list\">\r\n      <ButtonGroup vertical>{stock_list}</ButtonGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stock_list_button;\r\n",["51","52"],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":2,"column":8,"nodeType":"59","messageId":"60","endLine":2,"endColumn":12},{"ruleId":"57","severity":1,"message":"61","line":8,"column":10,"nodeType":"59","messageId":"60","endLine":8,"endColumn":15},{"ruleId":"57","severity":1,"message":"62","line":9,"column":10,"nodeType":"59","messageId":"60","endLine":9,"endColumn":30},{"ruleId":"63","severity":1,"message":"64","line":45,"column":9,"nodeType":"65","endLine":45,"endColumn":100},{"ruleId":"57","severity":1,"message":"66","line":1,"column":10,"nodeType":"59","messageId":"60","endLine":1,"endColumn":22},{"ruleId":"67","severity":1,"message":"68","line":9,"column":28,"nodeType":"69","messageId":"70","endLine":9,"endColumn":30},{"ruleId":"67","severity":1,"message":"68","line":9,"column":51,"nodeType":"69","messageId":"70","endLine":9,"endColumn":53},{"ruleId":"57","severity":1,"message":"71","line":1,"column":17,"nodeType":"59","messageId":"60","endLine":1,"endColumn":26},{"ruleId":"57","severity":1,"message":"72","line":1,"column":38,"nodeType":"59","messageId":"60","endLine":1,"endColumn":46},{"ruleId":"57","severity":1,"message":"73","line":4,"column":10,"nodeType":"59","messageId":"60","endLine":4,"endColumn":23},{"ruleId":"57","severity":1,"message":"74","line":3,"column":31,"nodeType":"59","messageId":"60","endLine":3,"endColumn":44},{"ruleId":"57","severity":1,"message":"75","line":3,"column":46,"nodeType":"59","messageId":"60","endLine":3,"endColumn":60},{"ruleId":"57","severity":1,"message":"76","line":3,"column":62,"nodeType":"59","messageId":"60","endLine":3,"endColumn":76},{"ruleId":"57","severity":1,"message":"77","line":3,"column":78,"nodeType":"59","messageId":"60","endLine":3,"endColumn":90},{"ruleId":"57","severity":1,"message":"78","line":3,"column":92,"nodeType":"59","messageId":"60","endLine":3,"endColumn":104},{"ruleId":"79","severity":1,"message":"80","line":10,"column":17,"nodeType":"65","endLine":10,"endColumn":58},{"ruleId":"79","severity":1,"message":"80","line":10,"column":58,"nodeType":"65","endLine":10,"endColumn":105},{"ruleId":"53","replacedBy":"81"},{"ruleId":"55","replacedBy":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'chart' is defined but never used.","'ListGroupItemHeading' is defined but never used.","react/jsx-pascal-case","Imported JSX component Stock_list_button must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'trackPromise' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Component' is defined but never used.","'useState' is defined but never used.","'getFormatDate' is defined but never used.","'ButtonToolbar' is defined but never used.","'DropdownToggle' is defined but never used.","'ButtonDropdown' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["83"],["84"],"no-global-assign","no-unsafe-negation"]